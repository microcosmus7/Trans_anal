uu <-lmer(pes ~ volum_ou + (1|idEstructura), data=Jackou)
summary(uu)
uu <-lmer(pes ~ volum_ou + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data=Jackou)
summary(uu)
uu <-lmer(pes ~ volum_ou + (1|idCaixaNiu) , data=Jackou)
summary(uu)
+ (1|idEstructura/idCaixaNiu)
uu <-lmer(pes ~ volum_ou + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data=Jackou)
summary(uu)
uu <-lmer(pes ~ volum_ou  + (1|idEstructura), data=Jackou)
summary(uu)
uu <- lmer(pes ~ julian + (1|idCaixaNiu) + (1|idEstructura), data=Jackou)
summary(uu)
uu <- lmer(pes ~ julian + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data=Jackou)
summary(uu)
rsq(uu)
uu <-lmer(pes ~ volum_ou + (1|idCaixaNiu) + (1|idEstructura), data=Jackou)
summary(uu)
uu <-lmer(pes~volum_ou+(1|idCaixa_old)+(1|idEstructura/idCaixa_old), data=Jackou)
summary(uu)
uu <-lmer(pes~volum_ou+(1|idCaixaNiu)+(1|idEstructura/idCaixaNiu), data=Jackou)
summary(uu)
uu <- lmer(pes ~ julian + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data=Jackou)
summary(uu)
uu <- lmer(pes ~ julian + (1|idCaixaNiu) + (1|idEstructura), data=Jackou)
summary(uu)
uu <- lmer(volum_ou ~ julian + (1|idCaixaNiu) + (1|idEstructura), data=Jackou)
summary(uu)
uu <- lmer(volum_ou ~ julian + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data=Jackou)
summary(uu)
uu <- lmer(pes ~ julian + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data=Jackou) # i don't know if nesting idCaixaNiu is correct
summary(uu)
### we see that cadolles has heavier eggs than the other towers, but valldels pous.
fi <- lm(pes ~ idEstructura, data=Jackou)
summary(fi)
### we see that cadolles has heavier eggs than the other towers, but valldels pous.
fi <- lm(volum_ou ~ idEstructura, data=Jackou)
summary(fi)
### we see that cadolles has heavier eggs than the other towers, but valldels pous.
fi <- lm(pes/volum_ou ~ idEstructura, data=Jackou)
summary(fi)
#### creating summary for mean and sd of egg VOLUME
egg_summary <- Jackou %>%
group_by(idEstructura) %>%
summarise(mean_vol = mean(volum_ou),
sd_vol = sd(volum_ou) / sqrt(n()))
# Create the boxplot with standard deviation bars VOLUME
ggplot(egg_summary, aes(x = idEstructura, y = mean_vol)) +
geom_boxplot() +
geom_errorbar(aes(ymin = mean_vol - sd_vol,
ymax = mean_vol + sd_vol),
width = 0.2,
position = position_dodge(width = 0.75)) +
labs(x = "Nesting Tower", y = "Mean Egg Volume") +
ggtitle("Mean Egg Volume per Nesting Tower with Standard Error Bars")
#### creating summary for mean and sd of egg DENSITY (JUST PLAYING)
egg_summary <- Jackou %>%
group_by(idEstructura) %>%
summarise(mean_dens = mean(pes/volum_ou),
sd_dens = sd(pes/volum_ou) / sqrt(n()))
View(egg_summary)
# Create the boxplot with standard deviation bars DENSITY
ggplot(egg_summary, aes(x = idEstructura, y = mean_dens)) +
geom_boxplot() +
geom_errorbar(aes(ymin = mean_dens - sd_dens,
ymax = mean_dens + sd_dens),
width = 0.2,
position = position_dodge(width = 0.75)) +
labs(x = "Nesting Tower", y = "Mean Egg Density") +
ggtitle("Mean Egg Density per Nesting Tower with Standard Error Bars")
View(egg_summary)
View(Jackou)
###### egg order, is this smth to consider?
plot(edat~julian)
###### egg order, is this smth to consider?
plot(edat~julian, Jackou)
###### egg order, is this smth to consider?
plot(edat~julian, data=Jackou)
###### egg order, is this smth to consider?
plot(Jackou$edat~Jackou$julian)
###### egg order, is this smth to consider?
egg_counts <- table(data$julian)
barplot(egg_counts)
###### egg order, is this smth to consider?
egg_counts <- table(data$julian)
###### egg order, is this smth to consider?
egg_counts <- table(Jackou$julian)
barplot(egg_counts)
###### egg order, is this smth to consider?
egg_counts <- table(Jackou$julian, Jackou$idEstructura)
barplot(egg_counts)
barplot(egg_countsbeside = TRUE,  # Display bars beside each other
legend.text = TRUE)
barplot(egg_counts,
beside = TRUE,  # Display bars beside each other
legend.text = TRUE)
barplot(egg_counts,
beside = TRUE,  # Display bars beside each other
legend.text = TRUE,
main = "Number of Eggs Measured per Day by Tower ID",
xlab = "Date",
ylab = "Number of Eggs",
col = rainbow(length(unique(data$Tower_ID))),  # Different color for each Tower ID
border = "black",
las = 2,  # Rotate x-axis labels vertically for better readability
cex.names = 0.8  # Adjust size of x-axis labels
)
barplot(egg_counts,
beside = TRUE,  # Display bars beside each other
legend.text = TRUE,
main = "Number of Eggs Measured per Day by Tower ID",
xlab = "Date",
ylab = "Number of Eggs",
col = rainbow(length(unique(Jackou$idEstructura))),  # Different color for each Tower ID
border = "black",
las = 2,  # Rotate x-axis labels vertically for better readability
cex.names = 0.8  # Adjust size of x-axis labels
)
barplot(egg_counts,
beside = TRUE,  # Display bars beside each other
legend.text = TRUE,
main = "Number of Eggs Measured per Day by Tower ID",
xlab = "Date",
ylab = "Number of Eggs",
col = rainbow(length(unique(Jackou$idEstructura))),  # Different color for each Tower ID
border = "black",
las = 2,  # Rotate x-axis labels vertically for better readability
cex.names = 0.8  # Adjust size of x-axis labels
)
egg_counts <- aggregate(idEstructura ~ julian, data = Jackou, FUN = function(x) length(unique(x)))
# Rename the columns for clarity
colnames(egg_counts) <- c("Laying_Date", "Egg_Count")
print(egg_counts)
egg_counts <- aggregate(idEstructura ~ julian + idEstructura, data = Jackou, FUN = function(x) length(unique(x)))
# Rename the columns for clarity
colnames(egg_counts) <- c("Laying_Date", "Egg_Count")
print(egg_counts)
egg_counts <- aggregate(idEstructura ~ julian + idEstructura, data = Jackou, FUN = function(x) length(unique(x)))
print(egg_counts)
egg_counts <- aggregate(pes ~ julian + idEstructura, data = Jackou, FUN = function(x) length(unique(x)))
print(egg_counts)
barplot(egg_counts)
ggplot(egg_counts, aes(x = julian, y = pes, fill = idEstructura)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of Eggs Measured per Tower per Day",
x = "Date",
y = "Number of Eggs",
fill = "Tower ID") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_fill_discrete(name = "Tower ID") +
guides(fill = guide_legend(title.position = "top"))
# Add a column for the order of the eggs within each nest
Jackou <- Jackou %>%
group_by(idCaixaNiu) %>%
mutate(egg_order = row_number())
# View the updated dataframe
View(Jackou)
## model to see order
fit <- lmer(volum_ou ~ egg_order + (1|idCaixaNiu) + (1|idCaixaNiu/idEstructura),data = Jackou)
summary(fit)
## model to see order
fit <- lmer(volum_ou ~ egg_order + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu),data = Jackou)
summary(fit)
clutch_synchrony <- subset(Jackou, egg_order == "1")
View(clutch_synchrony)
synchrony <- aggregate(pes ~ julian + idEstrucutura, data = Jackou, FUN = function(x) length(unique(x)))
synchrony <- aggregate(pes ~ julian + idEstructura, data = Jackou, FUN = function(x) length(unique(x)))
View(synchrony)
synchrony <- aggregate(pes ~ julian + idEstructura, data = clutch_synchrony, FUN = function(x) length(unique(x)))
View(synchrony)
ggplot(synchrony, aes(x = julian, y = pes, fill = idEstructura)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of Eggs Measured per Tower per Day",
x = "Date",
y = "Number of Eggs",
fill = "Tower ID") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_fill_discrete(name = "Tower ID") +
guides(fill = guide_legend(title.position = "top"))
synchrony_summary <- clutch_synchrony %>%
group_by(idEstructura, julian) %>%
summarise(mean_pes = mean(pes),
sd_pes = sd(pes) / sqrt(n()))
View(synchrony_summary)
ggplot(synchrony_summary, aes(x = julian, y = mean_pes, fill = idEstructura)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of Eggs Measured per Tower per Day",
x = "Date",
y = "Number of Eggs",
fill = "Tower ID") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_fill_discrete(name = "Tower ID") +
guides(fill = guide_legend(title.position = "top"))
ggplot(synchrony_summary, aes(x = julian, y = mean_pes, fill=idEstructura)) +
geom_boxplot() +
geom_errorbar(aes(ymin = mean_pes - sd_pes,
ymax = mean_pes + sd_pes),
width = 0.2,
position = position_dodge(width = 0.75)) +
labs(x = "Nesting Tower", y = "Mean Egg Density") +
ggtitle("Mean Egg Density per Nesting Tower with Standard Error Bars")
ggplot(synchrony_summary, aes(x = julian, y = mean_pes, fill=idEstructura)) +
geom_boxplot() +
geom_errorbar(aes(ymin = mean_pes - sd_pes,
ymax = mean_pes + sd_pes),
width = 0.2,
position = position_dodge(width = 0.75)) +
labs(x = "Laying Date", y = "Mean Egg weight") +
ggtitle("Mean Egg weight per Nesting Tower with Standard Error Bars")
synchrony_summary <- clutch_synchrony %>%
group_by(idEstructura) %>%
summarise(mean_julian = mean(julian),
sd_julian = sd(julian) / sqrt(n()))
View(synchrony_summary)
fit <- lmer(pes ~ julian + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu),data = clutch_synchrony)
summary(fit)
fit <- lmer(pes ~ julian + (1|idCaixaNiu),data = clutch_synchrony)
summary(fit)
fit <- lmer(pes ~ julian + (1|idEstructura),data = clutch_synchrony)
summary(fit)
# from work
setwd("C:/Users/a.bateman/Documents/GITHUB/Trans_anal")
library(mosaic)
library(ggplot2)
library(lme4)
library(dplyr)
library(DHARMa)
library(lubridate) #work with dates
library(fitdistrplus)
library(rsq)
library(zoo)
library(pbkrtest)
library(lmerTest)
# jack doc
Jack <- read.csv("Jackdawta.csv", sep=";", stringsAsFactors=TRUE)
# add julian date
Jack$dat<- as.Date(Jack$data, "%d/%m/%Y")
Jack$julian <- as.numeric(format(Jack$dat, "%j"))
# Separate the eggs of jackdaws
Jackou <- subset(Jack,edat == "ou" & pes>0 & volum_ou>0)
#### creating summary for mean and sd of egg DENSITY (JUST PLAYING)
egg_summary <- Jackou %>%
group_by(idEstructura) %>%
summarise(mean_dens = mean(pes/volum_ou),
sd_dens = sd(pes/volum_ou) / sqrt(n()))
# Create the boxplot with standard deviation bars DENSITY
ggplot(egg_summary, aes(x = idEstructura, y = mean_dens)) +
geom_boxplot() +
geom_errorbar(aes(ymin = mean_dens - sd_dens,
ymax = mean_dens + sd_dens),
width = 0.2,
position = position_dodge(width = 0.75)) +
labs(x = "Nesting Tower", y = "Mean Egg Density") +
ggtitle("Mean Egg Density per Nesting Tower with Standard Error Bars")
egg_counts <- aggregate(pes ~ julian + idEstructura, data = Jackou, FUN = function(x) length(unique(x)))
print(egg_counts) ## does not really help for what i want to do...
## first arrange data
Jackou <- Jackou %>%
arrange(idCaixaNiu, julian)
## then add order of eggs based on clutch
Jackou <- Jackou %>%
group_by(idCaixaNiu) %>%
mutate(egg_order = row_number())
# View the updated dataframe
View(Jackou)
## model to see order
fit <- lmer(volum_ou ~ egg_order + julian + (1|idCaixaNiu) + (1|idEstructura), data = Jackou)
summary(fit)
# Sort the data by measurement date
Jackou_syn <- Jackou %>% arrange(idCaixaNiu, julian)
# Group the data by clutch ID
Jackou_syn <- Jackou_syn %>% group_by(idCaixaNiu)
# Calculate laying date for each clutch
Jackou_syn <- Jackou_syn %>%
mutate(laying_date = min(julian))
# Calculate mean laying date for each clutch
Jackou_syn <- Jackou_syn %>%
group_by(idEstructura) %>%
mutate(mean_laying_date = mean(laying_date))
# Calculate synchrony values for each egg within clutch
Jackou_syn <- Jackou_syn %>%
mutate(synchrony = laying_date - mean_laying_date)
View(Jackou_syn)
fit <- lmer(pes ~ synchrony + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data = Jackou_syn)
## success, finally
## now we see whether synchrony affects weight of eggs
Jackou_syn$Ssyn<-scale(Jackou_syn$synchrony)
fit <- lmer(pes ~ Ssyn + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data = Jackou_syn)
summary(fit)
View(Jackou_syn)
Jackou_syn$SmeanLD <- scale(Jackou_syn$mean_laying_date)
fit <- lmer(pes ~ Ssyn + (1|idCaixaNiu) + (1|idEstructura/idCaixaNiu), data = Jackou_syn)
summary(fit)
Jackou_syn <- Jackou_syn %>%
mutate(egg_density = pes / volum_ou)
fit <- lmer(density ~ synchrony + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_syn)
str(Jackou_syn)
# from work
setwd("C:/Users/a.bateman/Documents/GITHUB/Trans_anal")
# jack doc
Jack <- read.csv("Jackdawta.csv", sep=";", stringsAsFactors=TRUE)
# add julian date
Jack$dat<- as.Date(Jack$data, "%d/%m/%Y")
Jack$julian <- as.numeric(format(Jack$dat, "%j"))
# Separate the eggs of jackdaws
Jackou <- subset(Jack,edat == "ou" & pes>0 & volum_ou>0)
## first arrange data
Jackou <- Jackou %>%
arrange(idCaixaNiu, julian)
## then add order of eggs based on clutch
Jackou <- Jackou %>%
group_by(idCaixaNiu) %>%
mutate(egg_order = row_number())
## model to see order
fit <- lmer(volum_ou ~ egg_order + julian + (1|idCaixaNiu) + (1|idEstructura), data = Jackou)
summary(fit)
library(mosaic)
library(ggplot2)
library(lme4)
library(dplyr)
library(DHARMa)
library(lubridate) #work with dates
library(fitdistrplus)
library(rsq)
library(zoo)
library(pbkrtest)
library(lmerTest)
# from work
setwd("C:/Users/a.bateman/Documents/GITHUB/Trans_anal")
# from home
setwd("~/PhD/PhD/projects/transect/Trans_anal")
# jack doc
Jack <- read.csv("Jackdawta.csv", sep=";", stringsAsFactors=TRUE)
# add julian date
Jack$dat<- as.Date(Jack$data, "%d/%m/%Y")
Jack$julian <- as.numeric(format(Jack$dat, "%j"))
# Separate the eggs of jackdaws
Jackou <- subset(Jack,edat == "ou" & pes>0 & volum_ou>0)
## first arrange data
Jackou <- Jackou %>%
arrange(idCaixaNiu, julian)
## then add order of eggs based on clutch
Jackou <- Jackou %>%
group_by(idCaixaNiu) %>%
mutate(egg_order = row_number())
# View the updated dataframe
View(Jackou)
Jackou <- Jackou %>%
group_by(idCaixaNiu, julian) %>%
mutate(certainty = ifelse(n() > 1, "uncertain", "certain"))
# View the updated dataframe
View(Jackou)
## model to see order
fit <- lmer(volum_ou ~ egg_order + julian + (1|idCaixaNiu) + (1|idEstructura), data = Jackou)
summary(fit)
## we create a dataframe without uncertainty.
Jackou_certain <- subset(Jackou, Jackou$certainty != "uncertain")
fi <- lmer(volum_ou ~ egg_order + julian + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_certain)
summary(fi)
fi <- lmer(volum_ou ~ julian + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_certain)
summary(fi)
summary(fi)
fi <- lmer(volum_ou ~ julian*idEstructura + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_certain)
summary(fi)
fi <- lmer(volum_ou ~ egg_order*idEstructura + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_certain)
summary(fi)
# Sort the data by measurement date
Jackou_syn <- Jackou %>% arrange(idCaixaNiu, julian)
# Group the data by clutch ID
Jackou_syn <- Jackou_syn %>% group_by(idCaixaNiu)
# Calculate laying date for each clutch
Jackou_syn <- Jackou_syn %>%
mutate(laying_date = min(julian))
# Calculate mean laying date for each clutch
Jackou_syn <- Jackou_syn %>%
group_by(idEstructura) %>%
mutate(mean_laying_date = mean(laying_date))
# Calculate synchrony values for each egg within clutch
Jackou_syn <- Jackou_syn %>%
mutate(synchrony = laying_date - mean_laying_date)
fit <- lmer(pes ~ synchrony + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_syn)
summary(fit)
fit <- lmer(volum_ou ~ synchrony + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_syn)
summary(fit)
fit <- lmer(pes ~ volum_ou + synchrony + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_syn)
summary(fit)
Jackou_syn_1 <- subset(Jackou_syn, Jackou_syn == 1)
Jackou_syn_1 <- subset(Jackou_syn, Jackou_syn == "1")
Jackou_syn_1 <- subset(Jackou_syn, Jackou_syn$egg_order == 1)
fit <- lmer(volum_ou ~ synchrony + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_syn_1)
summary(fit)
fit <- lmer(volum_ou ~ synchrony + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_syn_1)
fit <- lmer(volum_ou ~ synchrony + (1|idEstructura), data = Jackou_syn_1)
summary(fit)
fit <- lmer(pes ~ synchrony + (1|idEstructura), data = Jackou_syn_1)
summary(fit)
uu <-lmer(pes ~ volum_ou + (1|idCaixaNiu) + (1|idEstructura), data=Jackou)
summary(uu)
# Read the second Excel sheet into a data frame (assuming it's called 'time_sheet')
Time <- read.csv("Time_arrival.csv", sep=";", stringsAsFactors=TRUE)
# add julian date
Time$dat<- as.Date(Time$data, "%d/%m/%Y")
Time$julian <- as.numeric(format(Time$dat, "%j"))
View(Time)
## filter to get only 2023
Time <- subset(Time, Time$any == 2023)
View(Time)
# Merge the two data frames based on towerID and date
merged_data <- merge(Jackou, Time, by = c("julian", "idEstructura"))
# Merge the two data frames based on towerID and date
Jackou_T <- merge(Jackou, Time, by = c("julian", "idEstructura"))
# Merge the two data frames based on towerID and date
Jackou_t <- merge(Jackou, Time, by = c("julian", "idEstructura"))
View(Jackou_t)
## delete columns that are not needed
Jackou_t <- select(Jackou_t, -c(id_Social, any.y, data.y, X, X.1))
## delete columns that are not needed
Jackou_t <- select(Jackou_t, -c("id_Social", "any.y", "data.y","X", "X.1"))
## delete columns that are not needed
Jackou_t <- subset(Jackou_t, select = -c("id_Social", "any.y", "data.y","X", "X.1"))
## delete columns that are not needed
Jackou_t <- subset(Jackou_t, select = -c(id_Social,any.y,data.y,X,X.1))
Jackou_t <- subset(Jackou_t, select = -c(X.2,X.3,X.4,X.5,X.6))
Jackou_t <- subset(Jackou_t, select = -c(X.7,dat.y))
# see whether time affects egg weight. What should be random? tower and nest. What should be fixed? time
fit <- lmer(pes ~ hora + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_t)
summary(fit)
minutes <- as.numeric(time_parts[2])
# Function to convert time string to minutes past midnight
time_to_minutes <- function(time_str) {
time_parts <- strsplit(time_str, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
# Apply the function to the 'time' column
Jackou_t$hora_cont <- sapply(Jackou_t$hora, time_to_minutes)
seconds <- as.numeric(time_parts[3])
# Function to convert time string to minutes past midnight
time_to_minutes <- function(time_str) {
time_parts <- strsplit(time_str, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
# Apply the function to the 'time' column
Jackou_t$hora_cont <- sapply(Jackou_t$hora, time_to_minutes)
##first convert time to character
Jackou_t$hora_c <- as.character(Jackou_t$hora)
# Function to convert time string to minutes past midnight
time_to_minutes <- function(time_str) {
time_parts <- strsplit(time_str, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
# Apply the function to the 'time' column
Jackou_t$hora_cont <- sapply(Jackou_t$hora, time_to_minutes)
# Apply the function to the 'time' column
Jackou_t$hora_cont <- unlist(lapply(Jackou_t$hora, time_to_minutes))
# Apply the function to the 'time' column
Jackou_t$hora_cont <- unlist(lapply(Jackou_t$hora, time_to_minutes))
# Apply the function to the 'time' column
Jackou_t$hora_cont <- unlist(lapply(Jackou_t$hora, time_to_minutes))
# Function to convert time string to minutes past midnight
time_to_minutes <- function(time_str) {
hours <- as.numeric(substr(time_str, 1, 2))  # Extract hours
minutes <- as.numeric(substr(time_str, 4, 5))  # Extract minutes
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
# Apply the function to the 'time' column
Jackou_t$hora_cont <- unlist(lapply(Jackou_t$hora, time_to_minutes))
# see whether time affects egg weight. What should be random? tower and nest. What should be fixed? time
fit <- lmer(pes ~ hora + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_t)
summary(fit)
# Function to convert time string to minutes past midnight
time_to_minutes <- function(time_str) {
hours <- as.numeric(substr(time_str, 1, 2))  # Extract hours
minutes <- as.numeric(substr(time_str, 4, 5))  # Extract minutes
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
# Function to convert time string to minutes past midnight
time_to_minutes <- function(time_str) {
hours <- as.numeric(substr(time_str, 1, 2))  # Extract hours
minutes <- as.numeric(substr(time_str, 4, 5))  # Extract minutes
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
# Apply the function to the 'time' column
Jackou_t$hora_cont <- unlist(lapply(Jackou_t$hora, time_to_minutes))
# see whether time affects egg weight. What should be random? tower and nest. What should be fixed? time
fit <- lmer(pes ~ hora + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_t)
summary(fit)
# see whether time affects egg weight. What should be random? tower and nest. What should be fixed? time
fit <- lmer(pes ~ hora_cont + (1|idCaixaNiu) + (1|idEstructura), data = Jackou_t)
summary(fit)
# see whether time affects egg weight. What should be random? tower and nest. What should be fixed? time
Ja <- subset(Jackou_t, Jackou_t$egg_order==1)
fit <- lmer(pes ~ hora_cont + (1|idCaixaNiu) + (1|idEstructura), data = Ja)
summary(fit)
fit <- lmer(pes ~ hora_cont + (1|idEstructura), data = Ja)
summary(fit)
